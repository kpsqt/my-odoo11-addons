<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>


        <!-- Task Stages -->
        <record model="project.task.type" id="analysis">
            <field name="name">Requirements</field>
            <field name="sequence">100</field>
            <field name="is_initial">True</field>
            <field name="related_fields" search="[('model_id.model','=','project.task'),('name','in',['kanban_state','analysis_description','stage_id'])]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="specification" model="project.task.type">
            <field name="name">Specification</field>
            <field name="sequence">110</field>
            <field name="is_initial">False</field>
            <field name="doublon_allowed">False</field>
            <field name="related_fields" search="[('model_id.model','=','project.task'),('name','in',['description','kanban_state','stage_id'])]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <!--<record id="prototyping" model="project.task.type">
            <field name="name">Prototyping</field>
            <field name="sequence">120</field>
            <field name="is_initial">False</field>
            <field name="doublon_allowed">False</field>
            <field name="related_fields" search="[('model_id.model','=','project.task'),('name','=','prototyping_description')]" />
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>-->
        <record id="development" model="project.task.type">
            <field name="name">Development</field>
            <field name="sequence">130</field>
            <field name="is_initial">False</field>
            <field name="doublon_allowed">False</field>
            <field name="related_fields" search="[('model_id.model','=','project.task'),('name','in',['development_description','kanban_state','stage_id'])]" />
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="test" model="project.task.type">
            <field name="name">Test</field>
            <field name="sequence">140</field>
            <field name="is_initial">False</field>
            <field name="doublon_allowed">False</field>
            <field name="parent_stage" ref="development"/>
            <field name="related_fields" search="[('model_id.model','=','project.task'),('name','in',['transfer_ids','testreq_ids','testcase_ids','kanban_state','stage_id'])]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="deployment" model="project.task.type">
            <field name="name">Deployment</field>
            <field name="sequence">150</field>
            <field name="is_initial">False</field>
            <field name="doublon_allowed">False</field>
            <field name="related_fields" search="[('model_id.model','=','project.task'),('name','in',['deployment_description','kanban_state','stage_id'])]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="done" model="project.task.type">
            <field name="name">Done</field>
            <field name="sequence">160</field>
            <field name="is_initial">False</field>
            <field name="fold">True</field>
            <field name="related_fields" search="[('model_id.model','=','project.task'),('name','in',['kanban_state','stage_id'])]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="canceled" model="project.task.type">
            <field name="name">Canceled</field>
            <field name="sequence">170</field>
            <field name="is_initial">False</field>
            <field name="fold">True</field>
            <field name="related_fields" search="[('model_id.model','=','project.task'),('name','in',['cancellation_description','kanban_state','stage_id'])]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>

        <!-- Project Template -->
        <record id="ct_project_template" model="project.project">
            <!-- <field name="date_start" eval="time.strftime('%Y-%m-01 10:00:00')" /> -->
            <field name="name">Cotong Project Template</field>
            <field name="color">3</field>
            <field name="user_id" ref="base.user_root"/>
            <field name="alias_model">project.task</field>
            <field name="type_ids"
                   eval="[(4, ref('analysis')), (4, ref('specification')),
                   (4, ref('development')),(4, ref('test')),
                   (4, ref('deployment')), (4, ref('done')), (4, ref('canceled'))]"/>
            <!--<field mame="issue_stage_ids" eval="[(4, ref('issue_reopen_stage')),
                   (4, ref('issue_fixing_stage')),
                   (4, ref('issue_verifiying_stage')),
                   (4, ref('issue_closed_stage')),
                   (4, ref('issue_canceled_stage'))]"/>-->
        </record>

        <!-- Issue Stages -->
        <!--<record id="issue_reopen_stage" model="project.issue.stage">
            <field name="name">Re-Open</field>
            <field name="sequence">100</field>
            <field name="project_ids"
                   eval="[(4, ref('ct_project_template'))]"/>
            <field name="doublon_allowed">False</field>
            <field name="related_fields" search="[('model_id.model','=','project.issue'),('name','=','reopen_description')]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="issue_fixing_stage" model="project.issue.stage">
            <field name="name">Fixing</field>
            <field name="sequence">110</field>
            <field name="project_ids"
                   eval="[(4, ref('ct_project_template'))]"/>
            <field name="doublon_allowed">False</field>
            <field name="related_fields" search="[('model_id.model','=','project.issue'),('name','=','fixing_description')]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="issue_verifying_stage" model="project.issue.stage">
            <field name="name">Verifying</field>
            <field name="sequence">120</field>
            <field name="project_ids"
                   eval="[(4, ref('ct_project_template'))]"/>
            <field name="doublon_allowed">False</field>
            <field name="parent_stage" ref="issue_fixing_stage"/>
            <field name="related_fields" search="[('model_id.model','=','project.issue'),('name','=','verification_description')]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="issue_closed_stage" model="project.issue.stage">
            <field name="name">Closed</field>
            <field name="sequence">130</field>
            <field name="project_ids"
                   eval="[(4, ref('ct_project_template'))]"/>
            <field name="related_fields" search="[('model_id.model','=','project.issue'),('name','=','closing_description')]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>
        <record id="issue_canceled_stage" model="project.issue.stage">
            <field name="name">Canceled</field>
            <field name="sequence">140</field>
            <field name="project_ids"
                   eval="[(4, ref('ct_project_template'))]"/>
            <field name="related_fields" search="[('model_id.model','=','project.issue'),('name','=','cancellation_description')]"/>
            <field name="user_ids" eval="[(4, ref('base.user_root'))]"/>
        </record>-->

        <!-- Repositories -->
        <record id="qiyun" model="c1_project_dev.repository">
            <field name="name">QitongYun</field>
            <field name="url">svn://repo.qitong.xin/ctc11</field>
        </record>

        <record id="yongyou" model="c1_project_dev.repository">
            <field name="name">Yonyou</field>
            <field name="url">svn://repo.qitong.xin/yonyou</field>
        </record>


        <record id="test_repo" model="c1_project_dev.repository">
            <field name="name">TestRep</field>
            <field name="url">svn://localhost/ctcloud</field>
        </record>

        <!-- Commands -->
        <!--<record id="cmd_install_module" model="c1_project_dev.command">
            <field name="name">Install odoo module</field>
            <field name="type">with_parameter</field>
            <field name="cmd"></field>
            <field name="description">Command used to install odoo modules</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>

        <record id="cmd_uninstall_module" model="c1_project_dev.command">
            <field name="name">Uninstall odoo module</field>
            <field name="type">with_parameter</field>
            <field name="cmd"></field>
            <field name="description">Command used to uninstall odoo modules</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>

        <record id="cmd_upgrade_module" model="c1_project_dev.command">
            <field name="name">Upgrade odoo module</field>
            <field name="type">with_parameter</field>
            <field name="cmd"></field>
            <field name="description">Command used to upgrade odoo modules</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>-->

        <!--<record id="cmd_restart_service" model="c1_project_dev.command">
            <field name="name">Restart service</field>
            <field name="cmd">docker restart</field>
            <field name="default_parameter">ct_project_docker_instance</field>
            <field name="description">Command used to restart odoo instance</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>-->

        <record id="cmd_pip_install" model="c1_project_dev.command">
            <field name="name">pip install</field>
            <field name="type">with_parameter</field>
            <field name="params_mandatory" eval="True"/>
            <field name="cmd">pip install</field>
            <field name="description">use pip to install python modules</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
            <!--<field name="as_sudoer" eval="True"/>-->
        </record>

        <record id="cmd_easy_install" model="c1_project_dev.command">
            <field name="name">Easy install</field>
            <field name="type">with_parameter</field>
            <field name="params_mandatory" eval="True"/>
            <field name="cmd">easy_install</field>
            <field name="description">use easy_install to install python modules</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>

        <record id="cmd_docker_pip_install" model="c1_project_dev.command">
            <field name="name">docker pip install</field>
            <field name="type">with_parameter</field>
            <field name="params_mandatory" eval="True"/>
            <field name="cmd">pip install</field>
            <field name="in_docker" eval="True"/>
            <field name="description">use pip to install python modules in the docker container specified in the configs</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
            <!--<field name="suffix_cmd" ref="cmd_pip_install"/>-->
        </record>

        <!--<record id="cmd_docker_easy_install" model="c1_project_dev.command">
            <field name="name">docker easy_install</field>
            <field name="type">with_parameter</field>
            <field name="params_mandatory" eval="True"/>
            <field name="cmd">docker exec</field>
            <field name="in_docker" eval="True"/>
            <field name="description">use easy_install to install python modules in the docker container specified in the configs</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
            <field name="suffix_cmd" ref="cmd_easy_install"/>
        </record>-->

        <record id="cmd_docker_exec" model="c1_project_dev.command">
            <field name="name">docker exec</field>
            <field name="type">with_parameter</field>
            <field name="params_mandatory" eval="True"/>
            <field name="cmd">docker exec</field>
            <!--<field name="in_docker" eval="True"/>-->
            <field name="description">used to execute some commands in docker container</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>

        <record id="cmd_docker_start" model="c1_project_dev.command">
            <field name="name">docker start</field>
            <field name="type">with_parameter</field>
            <field name="params_mandatory" eval="True"/>
            <field name="cmd">docker start</field>
            <field name="description">Used to start docker container</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>

        <record id="cmd_docker_stop" model="c1_project_dev.command">
            <field name="name">docker stop</field>
            <field name="type">with_parameter</field>
            <field name="params_mandatory" eval="True"/>
            <field name="cmd">docker stop</field>
            <field name="description">Used stop docker container</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>

        <record id="cmd_docker_restart" model="c1_project_dev.command">
            <field name="name">docker restart</field>
            <field name="type">with_parameter</field>
            <field name="params_mandatory" eval="True"/>
            <field name="cmd">docker restart</field>
            <field name="description">Used to restart docker container</field>
            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
        </record>

        <record id="collect_backup_file_cron" model="ir.cron">
            <field name="name">Collect backup files</field>
            <field name="model_id" ref="model_c1_project_dev_backup_file"/>
            <field name="state">code</field>
            <field name="interval_number">1</field>
            <field name="numbercall">-1</field>
            <field name="interval_type">days</field>
            <field name="active" eval="True"/>
            <field name="code">model.collect_files</field>
        </record>


        <record id="menu_feedbacks" model="website.menu">
            <field name="name">Feedbacks</field>
            <field name="url">/projects/requirements</field>
            <field name="parent_id" ref="website.main_menu"/>
            <field name="sequence" type="int">200</field>
        </record>

    </data>
</odoo>